{
	"preset": {
		"gw.bundle.bat":				{
												"path": "<[presets]>gw.bundle.bat.preset",
												"dst": "<[project]>",
												"renameRx": [ [ "(.*?)\\.preset$", "i" ], "$1" ]
											},
		"gw.bundle-watched.bat":	{
												"path": "<[presets]>gw.bundle-watched.bat.preset",
												"dst": "<[project]>",
												"renameRx": [ [ "(.*?)\\.preset$", "i" ], "$1" ]
											},
		"index.html":					{
												"path": "<[presets]>index.html.template",
												"dst": "<[project]>",
												"renameRx": [ [ "(.*?)\\.template$", "i" ], "$1" ]
											},
		"<[importFileName]>":		{
												"path": "<[presets]><[importFileName]>.preset",
												"dst": "<[project]><[sourcesDirName]>",
												"renameRx": [ [ "(.*?)\\.preset$", "i" ], "$1" ]
											},
		"webpack.config.js":			{
												"path": "<[presets]>webpack.config.js.preset",
												"dst": "<[project]>",
												"renameRx": [ [ "(.*?)\\.preset$", "i" ], "$1" ]
											}
	},
	"placeholder": {
		"sourcesDirName": "<[sourcesDirName]>",
		"importFileName": "<[importFileName]>",
		"bundledFileName": "<[bundledFileName]>",
		"index.html": {
			"charset": "utf-8",
			"lang": "ja",
			"title": "Hi, world."
		},
		"index.js": {
			"sample": "(async emoji => { for await (const v of { async *[Symbol.asyncIterator]() { yield Promise.resolve(((...args) => args.at(1) + args[0].at(1))`${'Hi'}, world.`).then(message => /\\p{Basic_Emoji}/v.test(emoji) && message.replaceAll(/(hi)/gi, `${emoji} $1`)); } }) alert(v); })('ðŸ‘‹');"
		}
	},
	"setting": {
		"setup": {
			"config.bat": {
				"langs": [ "ja-JP" ]
			}
		}
	}
}